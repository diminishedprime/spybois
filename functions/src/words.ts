import * as uuid from "uuid/v4";
const words = [
  "Hollywood",
  "WellFoot",
  "New YorkSpring",
  "CourtTube",
  "PointTablet",
  "SlipDate",
  "DrillLemon",
  "Bell",
  "Screen",
  "FairTorch",
  "StateMatch",
  "IronBlock",
  "FranceAustralia",
  "LimousineStream",
  "GloveNurse",
  "Leprechaun",
  "Play",
  "ToothArm",
  "BermudaDiamond",
  "WhaleComic",
  "MammothGreen",
  "PassMissile",
  "PasteDrop",
  "Pheonix",
  "Marble",
  "StaffFigure",
  "ParkCentaur",
  "ShadowFish",
  "CottonEgypt",
  "TheaterScale",
  "FallTrack",
  "Force",
  "Dinosaur",
  "BillMine",
  "TurkeyMarch",
  "ContractBridge",
  "RobinLine",
  "PlateBand",
  "FireBank",
  "Boom",
  "Cat",
  "ShotSuit",
  "ChocolateRoulette",
  "MercuryMoon",
  "NetLawyer",
  "SatelliteAngel",
  "SpiderGermany",
  "Fork",
  "Pitch",
  "KingCrane",
  "TripDog",
  "ConductorPart",
  "BugleWitch",
  "KetchupPress",
  "SpineWorm",
  "Alps",
  "Bond",
  "PanBeijing",
  "RacketCross",
  "SealAztec",
  "MapleParachute",
  "HotelBerry",
  "SoldierRay",
  "Post",
  "Greece",
  "SquareMass",
  "BatWave",
  "CarSmuggler",
  "EnglandCrash",
  "TailCard",
  "HornCapital",
  "Fence",
  "Deck",
  "BuffaloMicroscope",
  "JetDuck",
  "RingTrain",
  "FieldGold",
  "TickCheck",
  "QueenStrike",
  "Kangaroo",
  "Spike",
  "ScientistEngine",
  "ShakespeareWind",
  "KidEmbassy",
  "RobotNote",
  "GroundDraft",
  "HamWar",
  "Mouse",
  "Center",
  "ChickChina",
  "BoltSpot",
  "PianoPupil",
  "PlotLion",
  "PoliceHead",
  "LitterConcert",
  "Mug",
  "Vacuum",
  "AtlantisStraw",
  "SwitchSkyscraper",
  "LaserScuba Diver",
  "AfricaPlastic",
  "DwarfLap",
  "LifeHoney",
  "Horseshoe",
  "Unicorn",
  "SpyPants",
  "WallPaper",
  "SoundIce",
  "TagWeb",
  "FanOrange",
  "TempleCanada",
  "Scorpion",
  "Undertaker",
  "MailEurope",
  "SoulApple",
  "PoleTap",
  "MouthAmbulance",
  "DressIce Cream",
  "RabbitBuck",
  "Agent",
  "Sock",
  "NutBoot",
  "GhostOil",
  "SuperheroCode",
  "KiwiHospital",
  "SaturnFilm",
  "ButtonSnowman",
  "Helicopter",
  "Loch Ness",
  "LogPrincess",
  "TimeCook",
  "RevolutionShoe",
  "MoleSpell",
  "GrassWasher",
  "GameBeat",
  "Hole",
  "Horse",
  "PirateLink",
  "DanceFly",
  "PitServer",
  "SchoolLock",
  "BrushPool",
  "StarJam",
  "Organ",
  "Berlin",
  "FaceLuck",
  "AmazonCast",
  "GasClub",
  "SinkWater",
  "ChairShark",
  "JupiterCopper",
  "Jack",
  "Platypus",
  "StickOlive",
  "GraceBear",
  "GlassRow",
  "PistolLondon",
  "RockVan",
  "VetBeach",
  "Charge",
  "Port",
  "DiseasePalm",
  "MoscowPin",
  "WashingtonPyramid",
  "OperaCasino",
  "PilotString",
  "NightChest",
  "YardTeacher",
  "PumpkinThief",
  "BarkBug",
  "MintCycle",
  "TelescopeCalf",
  "AirBox",
  "MountThumb",
  "AntarcticaTrunk",
  "SnowPenguin",
  "RootBar",
  "FileHawk",
  "BatteryCompound",
  "SlugOctopus",
  "WhipAmerica",
  "IvoryPound",
  "SubCliff",
  "LabEagle",
  "GeniusShip",
  "DiceHood",
  "HeartNovel",
  "PipeHimalayas",
  "CrownRound",
  "IndiaNeedle",
  "ShopWatch",
  "LeadTie",
  "TableCell",
  "CoverCzech",
  "BackBomb",
  "RulerForest",
  "BottleSpace",
  "HookDoctor",
  "BallBow",
  "DegreeRome",
  "PlaneGiant",
  "NailDragon",
  "StadiumFlute",
  "CarrotWake",
  "FighterModel",
  "TokyoEye",
  "MexicoHand",
  "SwingKey",
  "AlienTower",
  "PoisonCricket",
  "ColdKnife",
  "ChurchBoard",
  "CloakNinja",
  "OlympusBelt",
  "LightDeath",
  "StockMillionaire",
  "DayKnight",
  "PieBed",
  "CircleRose",
  "ChangeCap",
  "Triangle",
];

function shuffle<T>(a: T[]): T[] {
  var j, x, i;
  for (i = a.length - 1; i > 0; i--) {
    j = Math.floor(Math.random() * (i + 1));
    x = a[i];
    a[i] = a[j];
    a[j] = x;
  }
  return a;
}

// I should figure out how to share types between the client and functions, but
// I can't be bothered to right now.
export const makeBoard = (): any[] => {
  // Shuffles in place
  shuffle(words);
  const first25 = words.slice(0, 25);
  const asCards = first25.map((word: string, idx: number) => {
    const id = uuid();
    const value = word;
    const flipped = false;
    let team = "";
    const numRed = 8;
    const numBlue = 8;
    const doubleAgent = 1;
    const assassin = 1;
    // const bystanders = 8;
    if (idx < numRed) {
      team = "team1";
    } else if (idx < numRed + numBlue) {
      team = "team2";
    } else if (idx < numRed + numBlue + doubleAgent) {
      team = Math.random() > 0.5 ? "team1" : "team2";
    } else if (idx < numRed + numBlue + doubleAgent + assassin) {
      team = "assassin";
    } else {
      team = "bystander";
    }
    return {
      id,
      value,
      flipped,
      team,
    };
  });
  shuffle(asCards);
  return asCards;
};
